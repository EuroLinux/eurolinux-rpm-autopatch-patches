diff -uNr sos-3.9/sos/policies/redhat.py sos-3.9p/sos/policies/redhat.py
--- sos-3.9/sos/policies/redhat.py	2021-02-04 14:58:14.848155285 +0000
+++ sos-3.9p/sos/policies/redhat.py	2021-02-04 14:57:47.236129323 +0000
@@ -31,9 +31,9 @@
 
 
 class RedHatPolicy(LinuxPolicy):
-    distro = "Scientific Linux"
-    vendor = "Scientific Linux"
-    vendor_url = "http://www.scientificlinux.org/"
+    distro = "EuroLinux"
+    vendor = "EuroLinux"
+    vendor_url = "https://www.euro-linux.com/"
     _redhat_release = '/etc/redhat-release'
     _tmp_dir = "/var/tmp"
     _rpmq_cmd = 'rpm -qa --queryformat "%{NAME}|%{VERSION}|%{RELEASE}\\n"'
@@ -187,29 +187,29 @@
 _cb_profiles = ['boot', 'storage', 'system']
 _cb_plugopts = ['boot.all-images=on', 'rpm.rpmva=on', 'rpm.rpmdb=on']
 
-RHEL_RELEASE_STR = "Scientific Linux"
+RHEL_RELEASE_STR = "EuroLinux"
 
 RHV = "rhv"
-RHV_DESC = "Red Hat Virtualization"
+RHV_DESC = "EL Virtualization"
 
 RHEL = "rhel"
 RHEL_DESC = RHEL_RELEASE_STR
 
 RHOSP = "rhosp"
-RHOSP_DESC = "Red Hat OpenStack Platform"
+RHOSP_DESC = "OpenStack Platform"
 
 RHOCP = "ocp"
-RHOCP_DESC = "OpenShift Container Platform by Red Hat"
+RHOCP_DESC = "OpenShift Container Platform"
 RHOSP_OPTS = SoSOptions(plugopts=[
                              'process.lsof=off',
                              'networking.ethtool_namespaces=False',
                              'networking.namespaces=200'])
 
 RH_CFME = "cfme"
-RH_CFME_DESC = "Red Hat CloudForms"
+RH_CFME_DESC = "CloudForms"
 
 RH_SATELLITE = "satellite"
-RH_SATELLITE_DESC = "Red Hat Satellite"
+RH_SATELLITE_DESC = "Satellite"
 SAT_OPTS = SoSOptions(verify=True, plugopts=['apache.log=on'])
 
 CB = "cantboot"
@@ -238,7 +238,7 @@
     CB: PresetDefaults(name=CB, desc=CB_DESC, note=CB_NOTE, opts=CB_OPTS)
 }
 
-# Legal disclaimer text for Red Hat products
+# Legal disclaimer text for products
 disclaimer_text = """
 Any information provided to %(vendor)s will be treated in \
 accordance with the published support policies at:\n
@@ -257,8 +257,8 @@
 
 class RHELPolicy(RedHatPolicy):
     distro = RHEL_RELEASE_STR
-    vendor = "Scientific Linux"
-    vendor_url = "https://www.scientificlinux.org/"
+    vendor = "EuroLinux"
+    vendor_url = "https://www.euro-linux.com/"
     msg = _("""\
 This command will collect diagnostic and configuration \
 information from this %(distro)s system and installed \
@@ -280,7 +280,7 @@
     def check(cls):
         """Test to see if the running host is a RHEL installation.
 
-            Checks for the presence of the "Scientific Linux"
+            Checks for the presence of the "EuroLinux"
             release string at the beginning of the NAME field in the
             `/etc/os-release` file and returns ``True`` if it is
             found, and ``False`` otherwise.
@@ -389,7 +389,7 @@
 
 ATOMIC = "atomic"
 ATOMIC_RELEASE_STR = "Atomic"
-ATOMIC_DESC = "Red Hat Enterprise Linux Atomic Host"
+ATOMIC_DESC = "EuroLinux Atomic Host"
 
 atomic_presets = {
     ATOMIC: PresetDefaults(name=ATOMIC, desc=ATOMIC_DESC, note=NOTE_TIME,
@@ -398,7 +398,7 @@
 
 
 class RedHatAtomicPolicy(RHELPolicy):
-    distro = "Red Hat Atomic Host"
+    distro = "EuroLinux Atomic Host"
     msg = _("""\
 This command will collect diagnostic and configuration \
 information from this %(distro)s system.
@@ -435,7 +435,7 @@
 
 
 class RedHatCoreOSPolicy(RHELPolicy):
-    distro = "Red Hat CoreOS"
+    distro = "EuroLinux CoreOS"
     msg = _("""\
 This command will collect diagnostic and configuration \
 information from this %(distro)s system.
@@ -456,7 +456,7 @@
         host_release = os.environ[ENV_HOST_SYSROOT] + cls._redhat_release
         try:
             for line in open(host_release, 'r').read().splitlines():
-                coreos |= 'Red Hat CoreOS' in line
+                coreos |= 'EuroLinux CoreOS' in line
         except IOError:
             pass
         return coreos
@@ -492,5 +492,36 @@
         pkg = self.pkg_by_name("fedora-release") or \
             self.all_pkgs_by_name_regex("fedora-release-.*")[-1]
         return int(pkg["version"])
+class AnyELPolicy(RHELPolicy):
+    TEST_NAME="Red Hat"
+    def __init__(self, sysroot=None):
+        super(AnyELPolicy, self).__init__(sysroot=sysroot)
+        self.register_presets(rhel_presets)
+    @classmethod
+    def check(cls):
+        if not os.path.exists(OS_RELEASE):
+            return False
+        with open(OS_RELEASE, "r") as f:
+            for line in f:
+                if line.startswith("NAME"):
+                    (name, value) = line.split("=")
+                    value = value.strip("\"'")
+                    if cls.TEST_NAME in value:
+                        return True
+        return False
 
+class CentOSPolicy(AnyELPolicy):
+    TEST_NAME="CentOS"
+    def __init__(self, sysroot=None):
+        super(CentOSPolicy, self).__init__(sysroot=sysroot)
+
+class OracleLinuxPolicy(AnyELPolicy):
+   TEST_NAME="Oracle"
+   def __init__(self, sysroot=None):
+        super(OracleLinuxPolicy, self).__init__(sysroot=sysroot)
+
+class ScientificLinuxPolicy(AnyELPolicy):
+    TEST_NAME="Scientific"
+    def __init__(self, sysroot=None):
+        super(ScientificLinuxPolicy, self).__init__(sysroot=sysroot)
