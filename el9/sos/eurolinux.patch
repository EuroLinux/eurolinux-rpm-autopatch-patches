diff -uNr sos-4.5.0/sos/policies/distros/redhat.py sos-4.5.0p/sos/policies/distros/redhat.py
--- sos-4.5.0/sos/policies/distros/redhat.py	2023-02-01 14:56:36.000000000 +0000
+++ sos-4.5.0p/sos/policies/distros/redhat.py	2023-03-19 19:21:47.558011768 +0000
@@ -29,16 +29,16 @@
     REQUESTS_LOADED = False
 
 OS_RELEASE = "/etc/os-release"
-RHEL_RELEASE_STR = "Red Hat Enterprise Linux"
+RHEL_RELEASE_STR = "EuroLinux"
 ATOMIC_RELEASE_STR = "Atomic"
 
 
 class RedHatPolicy(LinuxPolicy):
-    distro = "Red Hat"
-    vendor = "Red Hat"
+    distro = "EuroLinux"
+    vendor = "EuroLinux"
     vendor_urls = [
-        ('Distribution Website', 'https://www.redhat.com/'),
-        ('Commercial Support', 'https://www.access.redhat.com/')
+        ('Distribution Website', 'https://euro-linux.com/'),
+        ('Commercial Support', 'https://support.euro-linux.com/')
     ]
     _tmp_dir = "/var/tmp"
     _in_container = False
@@ -179,8 +179,8 @@
 No changes will be made to system configuration.
 """
 
-RH_API_HOST = "https://api.access.redhat.com"
-RH_SFTP_HOST = "sftp://sftp.access.redhat.com"
+RH_API_HOST = "https://"
+RH_SFTP_HOST = "sftp://"
 
 
 class RHELPolicy(RedHatPolicy):
@@ -211,7 +211,7 @@
     the upload process for any sos report execution.
     """
     distro = RHEL_RELEASE_STR
-    vendor = "Red Hat"
+    vendor = "EuroLinux"
     msg = _("""\
 This command will collect diagnostic and configuration \
 information from this %(distro)s system and installed \
@@ -269,7 +269,8 @@
         if not self.get_upload_user():
             if self.case_id:
                 self.upload_user = input(_(
-                    "Enter your Red Hat Customer Portal username for "
+                    # this won't happen
+                    "Enter your EuroLinux username for "
                     "uploading [empty for anonymous SFTP]: ")
                 )
             else:   # no case id provided => failover to SFTP
@@ -315,71 +316,10 @@
         return fname
 
     def upload_sftp(self):
-        """Override the base upload_sftp to allow for setting an on-demand
-        generated anonymous login for the RH SFTP server if a username and
-        password are not given
-        """
-        if RH_SFTP_HOST.split('//')[1] not in self.get_upload_url():
-            return super(RHELPolicy, self).upload_sftp()
-
-        if not REQUESTS_LOADED:
-            raise Exception("python3-requests is not installed and is required"
-                            " for obtaining SFTP auth token.")
-        _token = None
-        _user = None
-        url = RH_API_HOST + '/support/v2/sftp/token'
-        # we have a username and password, but we need to reset the password
-        # to be the token returned from the auth endpoint
-        if self.get_upload_user() and self.get_upload_password():
-            auth = self.get_upload_https_auth()
-            ret = requests.post(url, auth=auth, timeout=10)
-            if ret.status_code == 200:
-                # credentials are valid
-                _user = self.get_upload_user()
-                _token = json.loads(ret.text)['token']
-            else:
-                self.ui_log.error(
-                    "Unable to retrieve Red Hat auth token using provided "
-                    "credentials. Will try anonymous."
-                )
-        # we either do not have a username or password/token, or both
-        if not _token:
-            adata = {"isAnonymous": True}
-            anon = requests.post(url, data=json.dumps(adata), timeout=10)
-            if anon.status_code == 200:
-                resp = json.loads(anon.text)
-                _user = resp['username']
-                _token = resp['token']
-                self.ui_log.info(
-                    _(f"User {_user} used for anonymous upload. Please inform "
-                      f"your support engineer so they may retrieve the data.")
-                )
-        if _user and _token:
-            return super(RHELPolicy, self).upload_sftp(user=_user,
-                                                       password=_token)
-        raise Exception("Could not retrieve valid or anonymous credentials")
+        return False
 
     def upload_archive(self, archive):
-        """Override the base upload_archive to provide for automatic failover
-        from RHCP failures to the public RH dropbox
-        """
-        try:
-            if self.upload_url and self.upload_url.startswith(RH_API_HOST) and\
-              (not self.get_upload_user() or not self.get_upload_password()):
-                self.upload_url = RH_SFTP_HOST
-            uploaded = super(RHELPolicy, self).upload_archive(archive)
-        except Exception:
-            uploaded = False
-            if not self.upload_url.startswith(RH_API_HOST):
-                raise
-            else:
-                self.ui_log.error(
-                    _(f"Upload to Red Hat Customer Portal failed. Trying "
-                      f"{RH_SFTP_HOST}")
-                )
-                self.upload_url = RH_SFTP_HOST
-                uploaded = super(RHELPolicy, self).upload_archive(archive)
-        return uploaded
+        return False
 
     def dist_version(self):
         try:
@@ -420,7 +360,7 @@
 
 
 class RedHatAtomicPolicy(RHELPolicy):
-    distro = "Red Hat Atomic Host"
+    distro = "EuroLinux Container Host"
     msg = _("""\
 This command will collect diagnostic and configuration \
 information from this %(distro)s system.
@@ -507,7 +447,7 @@
     impact how sos report collections are performed.
     """
 
-    distro = "Red Hat CoreOS"
+    distro = "EuroLinux Container OS"
     msg = _("""\
 This command will collect diagnostic and configuration \
 information from this %(distro)s system.
